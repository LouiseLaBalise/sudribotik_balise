// Generated by gencpp from file balise/Obj.msg
// DO NOT EDIT!


#ifndef BALISE_MESSAGE_OBJ_H
#define BALISE_MESSAGE_OBJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace balise
{
template <class ContainerAllocator>
struct Obj_
{
  typedef Obj_<ContainerAllocator> Type;

  Obj_()
    : dscript()
    , ident(0)
    , position()
    , theta(0.0)  {
    }
  Obj_(const ContainerAllocator& _alloc)
    : dscript(_alloc)
    , ident(0)
    , position(_alloc)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dscript_type;
  _dscript_type dscript;

   typedef uint32_t _ident_type;
  _ident_type ident;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::balise::Obj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::balise::Obj_<ContainerAllocator> const> ConstPtr;

}; // struct Obj_

typedef ::balise::Obj_<std::allocator<void> > Obj;

typedef boost::shared_ptr< ::balise::Obj > ObjPtr;
typedef boost::shared_ptr< ::balise::Obj const> ObjConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::balise::Obj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::balise::Obj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::balise::Obj_<ContainerAllocator1> & lhs, const ::balise::Obj_<ContainerAllocator2> & rhs)
{
  return lhs.dscript == rhs.dscript &&
    lhs.ident == rhs.ident &&
    lhs.position == rhs.position &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::balise::Obj_<ContainerAllocator1> & lhs, const ::balise::Obj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace balise

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::balise::Obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balise::Obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balise::Obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balise::Obj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balise::Obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balise::Obj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::balise::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f95b3051f8929661f923cb09696172fb";
  }

  static const char* value(const ::balise::Obj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf95b3051f8929661ULL;
  static const uint64_t static_value2 = 0xf923cb09696172fbULL;
};

template<class ContainerAllocator>
struct DataType< ::balise::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "balise/Obj";
  }

  static const char* value(const ::balise::Obj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::balise::Obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string dscript \n"
"uint32 ident\n"
"geometry_msgs/Vector3 position\n"
"float64 theta\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::balise::Obj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::balise::Obj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dscript);
      stream.next(m.ident);
      stream.next(m.position);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::balise::Obj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::balise::Obj_<ContainerAllocator>& v)
  {
    s << indent << "dscript: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dscript);
    s << indent << "ident: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ident);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALISE_MESSAGE_OBJ_H
