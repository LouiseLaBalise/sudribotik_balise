// Generated by gencpp from file balise_msgs/ArrayPositionPxWithType.msg
// DO NOT EDIT!


#ifndef BALISE_MSGS_MESSAGE_ARRAYPOSITIONPXWITHTYPE_H
#define BALISE_MSGS_MESSAGE_ARRAYPOSITIONPXWITHTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <balise_msgs/PositionPxWithType.h>

namespace balise_msgs
{
template <class ContainerAllocator>
struct ArrayPositionPxWithType_
{
  typedef ArrayPositionPxWithType_<ContainerAllocator> Type;

  ArrayPositionPxWithType_()
    : array_of_positionspx_with_type()  {
    }
  ArrayPositionPxWithType_(const ContainerAllocator& _alloc)
    : array_of_positionspx_with_type(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::balise_msgs::PositionPxWithType_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::balise_msgs::PositionPxWithType_<ContainerAllocator> >> _array_of_positionspx_with_type_type;
  _array_of_positionspx_with_type_type array_of_positionspx_with_type;





  typedef boost::shared_ptr< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> const> ConstPtr;

}; // struct ArrayPositionPxWithType_

typedef ::balise_msgs::ArrayPositionPxWithType_<std::allocator<void> > ArrayPositionPxWithType;

typedef boost::shared_ptr< ::balise_msgs::ArrayPositionPxWithType > ArrayPositionPxWithTypePtr;
typedef boost::shared_ptr< ::balise_msgs::ArrayPositionPxWithType const> ArrayPositionPxWithTypeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator1> & lhs, const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator2> & rhs)
{
  return lhs.array_of_positionspx_with_type == rhs.array_of_positionspx_with_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator1> & lhs, const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace balise_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb0df7150251fed4c0b95568bc63c1f4";
  }

  static const char* value(const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb0df7150251fed4ULL;
  static const uint64_t static_value2 = 0xc0b95568bc63c1f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "balise_msgs/ArrayPositionPxWithType";
  }

  static const char* value(const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PositionPxWithType[] array_of_positionspx_with_type\n"
"================================================================================\n"
"MSG: balise_msgs/PositionPxWithType\n"
"int32 x\n"
"int32 y \n"
"int32 theta\n"
"string type\n"
;
  }

  static const char* value(const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array_of_positionspx_with_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArrayPositionPxWithType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::balise_msgs::ArrayPositionPxWithType_<ContainerAllocator>& v)
  {
    s << indent << "array_of_positionspx_with_type[]" << std::endl;
    for (size_t i = 0; i < v.array_of_positionspx_with_type.size(); ++i)
    {
      s << indent << "  array_of_positionspx_with_type[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::balise_msgs::PositionPxWithType_<ContainerAllocator> >::stream(s, indent + "    ", v.array_of_positionspx_with_type[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALISE_MSGS_MESSAGE_ARRAYPOSITIONPXWITHTYPE_H
